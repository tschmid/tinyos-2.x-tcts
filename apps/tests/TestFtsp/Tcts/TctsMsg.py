#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'TctsMsg'
# message type.
#

import tinyos.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 45

# The Active Message type associated with this message.
AM_TYPE = 138

class TctsMsg(tinyos.message.Message.Message):
    # Create a new TctsMsg of size 45.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=45):
        tinyos.message.Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)

    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE

    get_amType = classmethod(get_amType)

    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <TctsMsg> \n"
        try:
            s += "  [src=0x%x]\n" % (self.get_src())
        except:
            pass
        try:
            s += "  [cmd=0x%x]\n" % (self.get_cmd())
        except:
            pass
        try:
            s += "  [startIndex=0x%x]\n" % (self.get_startIndex())
        except:
            pass
        try:
            s += "  [skews=";
            for i in range(0, 10):
                s += "0x%x " % (self.getElement_skews(i) & 0xff)
            s += "]\n";
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: src
    #   Field type: int
    #   Offset (bits): 0
    #   Size (bits): 16
    #

    #
    # Return whether the field 'src' is signed (False).
    #
    def isSigned_src(self):
        return False

    #
    # Return whether the field 'src' is an array (False).
    #
    def isArray_src(self):
        return False

    #
    # Return the offset (in bytes) of the field 'src'
    #
    def offset_src(self):
        return (0 / 8)

    #
    # Return the offset (in bits) of the field 'src'
    #
    def offsetBits_src(self):
        return 0

    #
    # Return the value (as a int) of the field 'src'
    #
    def get_src(self):
        return self.getUIntElement(self.offsetBits_src(), 16, 1)

    #
    # Set the value of the field 'src'
    #
    def set_src(self, value):
        self.setUIntElement(self.offsetBits_src(), 16, value, 1)

    #
    # Return the size, in bytes, of the field 'src'
    #
    def size_src(self):
        return (16 / 8)

    #
    # Return the size, in bits, of the field 'src'
    #
    def sizeBits_src(self):
        return 16

    #
    # Accessor methods for field: cmd
    #   Field type: short
    #   Offset (bits): 16
    #   Size (bits): 8
    #

    #
    # Return whether the field 'cmd' is signed (False).
    #
    def isSigned_cmd(self):
        return False

    #
    # Return whether the field 'cmd' is an array (False).
    #
    def isArray_cmd(self):
        return False

    #
    # Return the offset (in bytes) of the field 'cmd'
    #
    def offset_cmd(self):
        return (16 / 8)

    #
    # Return the offset (in bits) of the field 'cmd'
    #
    def offsetBits_cmd(self):
        return 16

    #
    # Return the value (as a short) of the field 'cmd'
    #
    def get_cmd(self):
        return self.getUIntElement(self.offsetBits_cmd(), 8, 1)

    #
    # Set the value of the field 'cmd'
    #
    def set_cmd(self, value):
        self.setUIntElement(self.offsetBits_cmd(), 8, value, 1)

    #
    # Return the size, in bytes, of the field 'cmd'
    #
    def size_cmd(self):
        return (8 / 8)

    #
    # Return the size, in bits, of the field 'cmd'
    #
    def sizeBits_cmd(self):
        return 8

    #
    # Accessor methods for field: startIndex
    #   Field type: int
    #   Offset (bits): 24
    #   Size (bits): 16
    #

    #
    # Return whether the field 'startIndex' is signed (False).
    #
    def isSigned_startIndex(self):
        return False

    #
    # Return whether the field 'startIndex' is an array (False).
    #
    def isArray_startIndex(self):
        return False

    #
    # Return the offset (in bytes) of the field 'startIndex'
    #
    def offset_startIndex(self):
        return (24 / 8)

    #
    # Return the offset (in bits) of the field 'startIndex'
    #
    def offsetBits_startIndex(self):
        return 24

    #
    # Return the value (as a int) of the field 'startIndex'
    #
    def get_startIndex(self):
        return self.getUIntElement(self.offsetBits_startIndex(), 16, 1)

    #
    # Set the value of the field 'startIndex'
    #
    def set_startIndex(self, value):
        self.setUIntElement(self.offsetBits_startIndex(), 16, value, 1)

    #
    # Return the size, in bytes, of the field 'startIndex'
    #
    def size_startIndex(self):
        return (16 / 8)

    #
    # Return the size, in bits, of the field 'startIndex'
    #
    def sizeBits_startIndex(self):
        return 16

    #
    # Accessor methods for field: skews
    #   Field type: int[]
    #   Offset (bits): 40
    #   Size of each element (bits): 32
    #

    #
    # Return whether the field 'skews' is signed (False).
    #
    def isSigned_skews(self):
        return False

    #
    # Return whether the field 'skews' is an array (True).
    #
    def isArray_skews(self):
        return True

    #
    # Return the offset (in bytes) of the field 'skews'
    #
    def offset_skews(self, index1):
        offset = 40
        if index1 < 0 or index1 >= 10:
            raise IndexError
        offset += 0 + index1 * 32
        return (offset / 8)

    #
    # Return the offset (in bits) of the field 'skews'
    #
    def offsetBits_skews(self, index1):
        offset = 40
        if index1 < 0 or index1 >= 10:
            raise IndexError
        offset += 0 + index1 * 32
        return offset

    #
    # Return the entire array 'skews' as a int[]
    #
    def get_skews(self):
        tmp = [None]*10
        for index0 in range (0, self.numElements_skews(0)):
                tmp[index0] = self.getElement_skews(index0)
        return tmp

    #
    # Set the contents of the array 'skews' from the given int[]
    #
    def set_skews(self, value):
        for index0 in range(0, len(value)):
            self.setElement_skews(index0, value[index0])

    #
    # Return an element (as a int) of the array 'skews'
    #
    def getElement_skews(self, index1):
        return self.getFloatElement(self.offsetBits_skews(index1), 32, 0)

    #
    # Set an element of the array 'skews'
    #
    def setElement_skews(self, index1, value):
        self.setSIntElement(self.offsetBits_skews(index1), 32, value, 1)

    #
    # Return the total size, in bytes, of the array 'skews'
    #
    def totalSize_skews(self):
        return (320 / 8)

    #
    # Return the total size, in bits, of the array 'skews'
    #
    def totalSizeBits_skews(self):
        return 320

    #
    # Return the size, in bytes, of each element of the array 'skews'
    #
    def elementSize_skews(self):
        return (32 / 8)

    #
    # Return the size, in bits, of each element of the array 'skews'
    #
    def elementSizeBits_skews(self):
        return 32

    #
    # Return the number of dimensions in the array 'skews'
    #
    def numDimensions_skews(self):
        return 1

    #
    # Return the number of elements in the array 'skews'
    #
    def numElements_skews():
        return 10

    #
    # Return the number of elements in the array 'skews'
    # for the given dimension.
    #
    def numElements_skews(self, dimension):
        array_dims = [ 10,  ]
        if dimension < 0 or dimension >= 1:
            raise IndexException
        if array_dims[dimension] == 0:
            raise IndexError
        return array_dims[dimension]

